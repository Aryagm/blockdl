# BlockDL Keras Layer Configurations
# Version: 1.0
# Description: Core neural network layers for Keras/TensorFlow

metadata:
  version: "1.0"
  description: "Core neural network layers for Keras/TensorFlow"
  framework: "keras"
  created: "2025-06-03"

# Category definitions with visual styling
categories:
  input_output:
    name: "Input/Output"
    color: "emerald"
    bg_color: "bg-emerald-50"
    border_color: "border-emerald-200"
    text_color: "text-emerald-700"
    description: "Start and end points of your network"

  dense:
    name: "Dense Layers"
    color: "blue"
    bg_color: "bg-blue-50"
    border_color: "border-blue-200"
    text_color: "text-blue-700"
    description: "Fully connected layers"

  convolutional:
    name: "Convolutional"
    color: "purple"
    bg_color: "bg-purple-50"
    border_color: "border-purple-200"
    text_color: "text-purple-700"
    description: "Conv2D and transpose convolution"

  pooling:
    name: "Pooling"
    color: "indigo"
    bg_color: "bg-indigo-50"
    border_color: "border-indigo-200"
    text_color: "text-indigo-700"
    description: "Downsampling and upsampling layers"

  transformation:
    name: "Transformation"
    color: "amber"
    bg_color: "bg-amber-50"
    border_color: "border-amber-200"
    text_color: "text-amber-700"
    description: "Shape transformation layers"

  activation:
    name: "Activation"
    color: "orange"
    bg_color: "bg-orange-50"
    border_color: "border-orange-200"
    text_color: "text-orange-700"
    description: "Non-linear activation functions"

  regularization:
    name: "Regularization"
    color: "rose"
    bg_color: "bg-rose-50"
    border_color: "border-rose-200"
    text_color: "text-rose-700"
    description: "Batch normalization and dropout"

  sequence:
    name: "Sequence"
    color: "cyan"
    bg_color: "bg-cyan-50"
    border_color: "border-cyan-200"
    text_color: "text-cyan-700"
    description: "RNN and embedding layers"

  merge:
    name: "Merge"
    color: "teal"
    bg_color: "bg-teal-50"
    border_color: "border-teal-200"
    text_color: "text-teal-700"
    description: "Layer combination operations"

# Layer definitions
layers:
  Input:
    metadata:
      category: "input_output"
      icon: "📥"
      description: "Input layer for data"
      tags: ["input", "data"]
      documentation: "https://keras.io/api/layers/core_layers/input/"

    visual:
      handles:
        input: false
        output: true
      default_size: [160, 80]

    parameters:
      inputType:
        type: "select"
        label: "Input Type"
        default: "image_grayscale"
        options:
          - value: "image_grayscale"
            label: "Grayscale Image (H×W×1)"
          - value: "image_color"
            label: "Color Image (H×W×3)"
          - value: "image_custom"
            label: "Custom Image (H×W×C)"
          - value: "flat_data"
            label: "Flattened Data (N,)"
          - value: "sequence"
            label: "Sequence Data (seq_len, features)"
          - value: "custom"
            label: "Custom Shape"
        validation:
          required: true

      height:
        type: "number"
        label: "Height"
        default: 28
        validation:
          min: 1
        show_when:
          inputType: ["image_grayscale", "image_color", "image_custom"]

      width:
        type: "number"
        label: "Width"
        default: 28
        validation:
          min: 1
        show_when:
          inputType: ["image_grayscale", "image_color", "image_custom"]

      channels:
        type: "number"
        label: "Channels"
        default: 1
        validation:
          min: 1
        show_when:
          inputType: ["image_custom"]

      flatSize:
        type: "number"
        label: "Size"
        default: 784
        validation:
          min: 1
        show_when:
          inputType: ["flat_data"]

      seqLength:
        type: "number"
        label: "Sequence Length"
        default: 100
        validation:
          min: 1
        show_when:
          inputType: ["sequence"]

      features:
        type: "number"
        label: "Features"
        default: 128
        validation:
          min: 1
        show_when:
          inputType: ["sequence"]

      customShape:
        type: "text"
        label: "Custom Shape"
        default: "(784,)"
        show_when:
          inputType: ["custom"]

    keras:
      import: "Input"
      code_template: |
        Input(shape={{computed_shape}})
      shape_computation: "input_layer"

  Output:
    metadata:
      category: "input_output"
      icon: "📤"
      description: "Output layer"
      tags: ["output", "classification", "regression"]

    visual:
      handles:
        input: true
        output: false

    parameters:
      outputType:
        type: "select"
        label: "Output Type"
        default: "multiclass"
        options:
          - value: "multiclass"
            label: "Multi-class Classification (softmax)"
          - value: "binary"
            label: "Binary Classification (sigmoid)"
          - value: "regression"
            label: "Regression (linear)"
          - value: "multilabel"
            label: "Multi-label Classification (sigmoid)"
          - value: "custom"
            label: "Custom Configuration"

      numClasses:
        type: "number"
        label: "Number of Classes"
        default: 10
        validation:
          min: 2
        show_when:
          outputType: ["multiclass"]

      units:
        type: "number"
        label: "Output Units"
        default: 1
        validation:
          min: 1
        show_when:
          outputType: ["custom", "multilabel", "regression"]

      activation:
        type: "select"
        label: "Activation"
        default: "softmax"
        options:
          - value: "softmax"
            label: "Softmax"
          - value: "sigmoid"
            label: "Sigmoid"
          - value: "linear"
            label: "Linear"
          - value: "tanh"
            label: "Tanh"
          - value: "relu"
            label: "ReLU"
        show_when:
          outputType: ["custom"]

      threshold:
        type: "number"
        label: "Decision Threshold"
        default: 0.5
        validation:
          min: 0
          max: 1
          step: 0.1
        show_when:
          outputType: ["binary"]

    keras:
      import: "Dense"
      code_template: |
        Dense({{computed_units}}, activation='{{computed_activation}}')
      shape_computation: "dense_layer"

  Dense:
    metadata:
      category: "dense"
      icon: "🔗"
      description: "Fully connected layer"
      tags: ["dense", "fully_connected"]
      documentation: "https://keras.io/api/layers/core_layers/dense/"

    visual:
      handles:
        input: true
        output: true

    parameters:
      units:
        type: "number"
        label: "Units"
        default: 128
        validation:
          min: 1
        help: "Number of output neurons"

      activation:
        type: "select"
        label: "Activation (optional)"
        default: "none"
        options:
          - value: "none"
            label: "None"
          - value: "relu"
            label: "ReLU"
          - value: "sigmoid"
            label: "Sigmoid"
          - value: "tanh"
            label: "Tanh"
          - value: "softmax"
            label: "Softmax"
          - value: "linear"
            label: "Linear"

      multiplier:
        type: "number"
        label: "Repeat (x times)"
        default: 1
        validation:
          min: 1
          max: 20
        help: "Repeat this layer multiple times"

    features:
      supports_multiplier: true

    keras:
      import: "Dense"
      code_template: "Dense({{units}}{{activation_suffix}})"
      shape_computation: "dense_layer"

  Conv2D:
    metadata:
      category: "convolutional"
      icon: "🔲"
      description: "2D convolution layer"
      tags: ["convolution", "cnn", "2d"]
      documentation: "https://keras.io/api/layers/convolution_layers/convolution2d/"

    visual:
      handles:
        input: true
        output: true

    parameters:
      filters:
        type: "number"
        label: "Filters"
        default: 32
        validation:
          min: 1
        help: "Number of output filters"

      kernel_size:
        type: "text"
        label: "Kernel Size"
        default: "(3,3)"
        help: "Size of convolution kernel"

      strides:
        type: "text"
        label: "Strides"
        default: "(1,1)"
        help: "Stride of convolution"

      padding:
        type: "select"
        label: "Padding"
        default: "same"
        options:
          - value: "valid"
            label: "Valid"
          - value: "same"
            label: "Same"

      multiplier:
        type: "number"
        label: "Repeat (x times)"
        default: 1
        validation:
          min: 1
          max: 10

    features:
      supports_multiplier: true

    keras:
      import: "Conv2D"
      code_template: "Conv2D({{filters}}, kernel_size={{kernel_size}}, strides={{strides}}, padding='{{padding}}')"
      shape_computation: "conv2d_layer"

  Conv2DTranspose:
    metadata:
      category: "convolutional"
      icon: "🔳"
      description: "2D transpose convolution layer (deconvolution)"
      tags: ["transpose", "deconvolution", "upsampling"]

    visual:
      handles:
        input: true
        output: true

    parameters:
      filters:
        type: "number"
        label: "Filters"
        default: 32
        validation:
          min: 1

      kernel_size:
        type: "text"
        label: "Kernel Size"
        default: "(3,3)"

      strides:
        type: "text"
        label: "Strides"
        default: "(2,2)"

      padding:
        type: "select"
        label: "Padding"
        default: "same"
        options:
          - value: "valid"
            label: "Valid"
          - value: "same"
            label: "Same"

    keras:
      import: "Conv2DTranspose"
      code_template: |
        Conv2DTranspose({{filters}}, kernel_size={{kernel_size}}, strides={{strides}}, padding='{{padding}}')
      shape_computation: "conv2d_transpose_layer"

  MaxPool2D:
    metadata:
      category: "pooling"
      icon: "⬇️"
      description: "2D max pooling layer"
      tags: ["pooling", "downsampling"]

    visual:
      handles:
        input: true
        output: true

    parameters:
      pool_size:
        type: "text"
        label: "Pool Size"
        default: "(2,2)"

    keras:
      import: "MaxPool2D"
      code_template: |
        MaxPool2D(pool_size={{pool_size}})
      shape_computation: "maxpool2d_layer"

  GlobalAvgPool:
    metadata:
      category: "pooling"
      icon: "🌐"
      description: "Global average pooling layer"
      tags: ["pooling", "global"]

    visual:
      handles:
        input: true
        output: true

    parameters: {}

    keras:
      import: "GlobalAveragePooling2D"
      code_template: |
        GlobalAveragePooling2D()
      shape_computation: "global_avg_pool_layer"

  UpSampling2D:
    metadata:
      category: "pooling"
      icon: "⬆️"
      description: "2D upsampling layer"
      tags: ["upsampling"]

    visual:
      handles:
        input: true
        output: true

    parameters:
      size:
        type: "text"
        label: "Upsampling Size"
        default: "(2,2)"

    keras:
      import: "UpSampling2D"
      code_template: |
        UpSampling2D(size={{size}})
      shape_computation: "upsampling2d_layer"

  Flatten:
    metadata:
      category: "transformation"
      icon: "📏"
      description: "Flatten multi-dimensional input"
      tags: ["flatten", "reshape"]

    visual:
      handles:
        input: true
        output: true

    parameters: {}

    keras:
      import: "Flatten"
      code_template: |
        Flatten()
      shape_computation: "flatten_layer"

  Activation:
    metadata:
      category: "activation"
      icon: "⚡"
      description: "Activation function"
      tags: ["activation", "nonlinearity"]

    visual:
      handles:
        input: true
        output: true

    parameters:
      type:
        type: "select"
        label: "Activation Type"
        default: "relu"
        options:
          - value: "relu"
            label: "ReLU"
          - value: "sigmoid"
            label: "Sigmoid"
          - value: "tanh"
            label: "Tanh"
          - value: "softmax"
            label: "Softmax"
          - value: "linear"
            label: "Linear"

    keras:
      import: "Activation"
      code_template: |
        Activation('{{type}}')
      shape_computation: "preserve_shape"

  BatchNorm:
    metadata:
      category: "regularization"
      icon: "📊"
      description: "Batch normalization layer"
      tags: ["normalization", "regularization"]

    visual:
      handles:
        input: true
        output: true

    parameters: {}

    keras:
      import: "BatchNormalization"
      code_template: |
        BatchNormalization()
      shape_computation: "preserve_shape"

  Dropout:
    metadata:
      category: "regularization"
      icon: "🎲"
      description: "Regularization layer"
      tags: ["dropout", "regularization"]

    visual:
      handles:
        input: true
        output: true

    parameters:
      rate:
        type: "number"
        label: "Dropout Rate"
        default: 0.2
        validation:
          min: 0
          max: 1
          step: 0.1

    keras:
      import: "Dropout"
      code_template: |
        Dropout({{rate}})
      shape_computation: "preserve_shape"

  Embedding:
    metadata:
      category: "sequence"
      icon: "📚"
      description: "Embedding layer for text data"
      tags: ["embedding", "text", "nlp"]

    visual:
      handles:
        input: true
        output: true

    parameters:
      input_dim:
        type: "number"
        label: "Input Dimension"
        default: 10000
        validation:
          min: 1

      output_dim:
        type: "number"
        label: "Output Dimension"
        default: 128
        validation:
          min: 1

      input_length:
        type: "number"
        label: "Input Length"
        default: 100
        validation:
          min: 1

    keras:
      import: "Embedding"
      code_template: |
        Embedding({{input_dim}}, {{output_dim}}, input_length={{input_length}})
      shape_computation: "embedding_layer"

  LSTM:
    metadata:
      category: "sequence"
      icon: "🔄"
      description: "Long Short-Term Memory layer"
      tags: ["lstm", "rnn", "sequence"]

    visual:
      handles:
        input: true
        output: true

    parameters:
      units:
        type: "number"
        label: "Units"
        default: 128
        validation:
          min: 1

      return_sequences:
        type: "select"
        label: "Return Sequences"
        default: "false"
        options:
          - value: "false"
            label: "False"
          - value: "true"
            label: "True"

      multiplier:
        type: "number"
        label: "Repeat (x times)"
        default: 1
        validation:
          min: 1
          max: 10

    features:
      supports_multiplier: true

    keras:
      import: "LSTM"
      code_template: |
        LSTM({{units}}, return_sequences={{return_sequences}})
      multiplier_template: |
        {% if multiplier == 1 %}
        {{layer_code}}
        {% elif multiplier <= 5 %}
        {% for i in range(multiplier) %}{{layer_code}}{% if not loop.last %},{% endif %}{% endfor %}
        {% else %}
        # Add {{multiplier}} LSTM layers with {{units}} units
        *[{{layer_code}} for _ in range({{multiplier}})]
        {% endif %}
      shape_computation: "lstm_layer"

  GRU:
    metadata:
      category: "sequence"
      icon: "🔁"
      description: "Gated Recurrent Unit layer"
      tags: ["gru", "rnn", "sequence"]

    visual:
      handles:
        input: true
        output: true

    parameters:
      units:
        type: "number"
        label: "Units"
        default: 128
        validation:
          min: 1

      return_sequences:
        type: "select"
        label: "Return Sequences"
        default: "false"
        options:
          - value: "false"
            label: "False"
          - value: "true"
            label: "True"

    keras:
      import: "GRU"
      code_template: |
        GRU({{units}}, return_sequences={{return_sequences}})
      shape_computation: "gru_layer"

  Merge:
    metadata:
      category: "merge"
      icon: "🔀"
      description: "Merge multiple inputs"
      tags: ["merge", "concatenate", "add"]

    visual:
      handles:
        input: true
        output: true
        multiple_inputs: true

    parameters:
      mode:
        type: "select"
        label: "Merge Mode"
        default: "concat"
        options:
          - value: "concat"
            label: "Concatenate"
          - value: "add"
            label: "Add"
          - value: "multiply"
            label: "Multiply"
          - value: "average"
            label: "Average"
          - value: "maximum"
            label: "Maximum"

    keras:
      import: "Concatenate, Add, Multiply, Average, Maximum"
      code_template: |
        {% if mode == "concat" %}Concatenate(){% endif %}
        {% if mode == "add" %}Add(){% endif %}
        {% if mode == "multiply" %}Multiply(){% endif %}
        {% if mode == "average" %}Average(){% endif %}
        {% if mode == "maximum" %}Maximum(){% endif %}
      shape_computation: "merge_layer"
